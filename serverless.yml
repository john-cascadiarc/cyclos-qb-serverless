# Welcome to Serverless!
#
# This file is the main config file for your service.
#
# For full config options, check the docs:
#    docs.serverless.com

service: plugin-qbo # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  environment:
    STAGE: ${self:provider.stage}
    TABLE: ${self:provider.stage}-plugin
    CLIENT_KEY: ${ssm:/${self:provider.stage}/qb-cyclos/key~true}
    CLIENT_SECRET: ${ssm:/${self:provider.stage}/qb-cyclos/secret~true}
    CYCLOS_URL: 'https://dev.leftcoastfs.com/lcfs_dev'
    LOGLEVEL: DEBUG
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "*"
      

# you can add packaging information here
package:
  include:
    - qbo.py
  exclude:
    - '*/**'

functions:
  quickbooks:
    handler: qbo.handler
    events:
      - http:
          path: /qbo
          method: post
          cors: true
  qbo-setup:
    handler: qbo.setup
    timeout: 60
    events:
      - sqs: arn:aws:sqs:us-west-2:386461531385:qbo-setup
        batchSize: 1
  qbo-purchase:
    handler: qbo.do_purchase
    timeout: 25
    events:
      - sqs: arn:aws:sqs:us-west-2:386461531385:qbo-purchase
        batchSize: 1
  qbo-payment:
    handler: qbo.do_payment
    timeout: 25
    events:
      - sqs: arn:aws:sqs:us-west-2:386461531385:qbo-payment
        batchSize: 1

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
  #Outputs:
  #   NewOutput:
  #     Description: "Description for the output"
  #     Value: "Some output value"

